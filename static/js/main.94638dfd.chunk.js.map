{"version":3,"sources":["+store/actions.js","components/Person.js","components/PersonList.js","components/ActionBar.js","App.js","serviceWorker.js","+store/reducer.js","+store/middlewares/syncStatusMiddleware.js","+store/util/actionProcrastinator.js","+store/middlewares/apiMiddleware.js","index.js","services/personService.js","services/mockHttpApi.js","+store/model.js"],"names":["postPersonAction","person","type","patchPersonAction","deletePersonAction","updatePersonAction","setSyncStatusAction","isSyncing","connect","state","ownProps","isLast","persons","length","_","findIndex","_ref2","uid","dispatch","updatePersonName","name","Object","objectSpread","createOrUpdate","addPerson","removePerson","_ref","react_default","a","createElement","className","onSubmit","ev","preventDefault","handleSubmit","style","width","tabIndex","id","placeholder","value","onChange","target","autoFocus","onClick","map","p","key","components_Person","fetch","concat","disabled","App","Fragment","components_PersonList","components_ActionBar","Boolean","window","location","hostname","match","initialState","syncStatusMiddleware","store","syncStatus","Subject","asObservable","pipe","debounceTime","subscribe","next","action","ActionPostponeObject","observable$","_this","this","mergeObjectPath","arguments","undefined","classCallCheck","buffer$","actionSubject$","merge","initialObservable$","followUpObservable","filter","_initFollowUpObservable","buffer","actions","last","withLatestFrom","slicedToArray","mergeObject","setWith","clone","take","_initObservable","obs$","tap","get","push","ActionProcrastinator","_this2","_uidMap","create","_remove","pushAction","hasUUID","Error","apiMiddleware","personService","actionProcrastinator","result","getState","post","patch","delete","fetchAll","fetchPersonsSuccessAction","PersonService","http","currentId","url","omit","console","info","of","delay","throwError","Observable","observer","setTimeout","personWithNewId","toConsumableArray","complete","updatePerson","error","status","msg","oldPerson","createStore","uniqueId","newPerson","applyMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94638dfd.chunk.js","sourcesContent":["import type {Person} from \"./model\";\n\n/*********************************************\n * FETCH PERSON\n *********************************************/\n\nexport const FETCH_PERSONS = 'FETCH_PERSONS';\nexport type FetchPersonsAction = {\n    type: FETCH_PERSONS\n}\nexport const fetchPersonsAction = (): FetchPersonsAction => ({\n    type: FETCH_PERSONS\n});\n\nexport const FETCH_PERSONS_SUCCESS = 'FETCH_PERSONS_SUCCESS';\nexport type FetchPersonsSuccessAction = {\n    type: FETCH_PERSONS_SUCCESS,\n    persons: Person[]\n}\n\nexport const fetchPersonsSuccessAction = (persons: Person[]): FetchPersonsSuccessAction => ({\n    type: FETCH_PERSONS_SUCCESS,\n    persons\n});\n\n\n/*********************************************\n * SAVE PERSON\n *********************************************/\n\nexport const POST_PERSON = 'POST_PERSON';\nexport type PostPersonAction = {\n    type: POST_PERSON,\n    person: Person\n}\nexport const postPersonAction =\n    (person: Person): PostPersonAction => ({\n        type: POST_PERSON, person\n    });\n\nexport const POST_PERSON_SUCCESS = 'POST_PERSON_SUCCESS';\nexport type PostPersonSuccessAction = {\n    type: POST_PERSON_SUCCESS,\n    person: Person\n}\nexport const postPersonSuccessAction =\n    (person: Person): PostPersonSuccessAction => ({\n        type: POST_PERSON_SUCCESS, person\n    });\n\n\n/*********************************************\n * PATCH PERSON\n *********************************************/\n\nexport const PATCH_PERSON = 'PATCH_PERSON';\nexport type PatchPersonAction = {\n    type: PATCH_PERSON,\n    person: Person\n}\nexport const patchPersonAction =\n    (person: Person): PatchPersonAction => ({\n        type: PATCH_PERSON, person\n    });\n\nexport const PATCH_PERSON_SUCCESS = 'PATCH_PERSON_SUCCESS';\nexport type PatchPersonSuccessAction = {\n    type: PATCH_PERSON_SUCCESS,\n    person: Person\n}\nexport const patchPersonSuccessAction =\n    (person: Person): PatchPersonSuccessAction => ({\n        type: PATCH_PERSON_SUCCESS, person\n    });\n\n\n/*********************************************\n * DELETE PERSON\n *********************************************/\n\nexport const DELETE_PERSON = 'DELETE_PERSON';\nexport type DeletePersonAction = {\n    type: DELETE_PERSON,\n    person: Person\n}\nexport const deletePersonAction =\n    (person: Person): DeletePersonAction => ({\n        type: DELETE_PERSON, person\n    });\n\nexport const DELETE_PERSON_SUCCESS = 'DELETE_PERSON_SUCCESS';\nexport type DeletePersonSuccessAction = {\n    type: DELETE_PERSON_SUCCESS,\n    person: Person\n}\nexport const deletePersonSuccessAction =\n    (person: Person): DeletePersonSuccessAction => ({\n        type: DELETE_PERSON_SUCCESS, person\n    });\n\n/*********************************************\n * REMOVE PERSON\n *********************************************/\n\nexport const REMOVE_PERSON = 'REMOVE_PERSON';\nexport type RemovePersonAction = {\n    type: REMOVE_PERSON,\n    person: Person\n}\nexport const removePersonAction =\n    (person: Person): RemovePersonAction => ({\n        type: REMOVE_PERSON, person\n    });\n\n/*********************************************\n * ADD PERSON\n *********************************************/\n\nexport const ADD_PERSON = 'ADD_PERSON';\nexport type AddPersonAction = {\n    type: ADD_PERSON\n};\nexport const addPersonAction = (): AddPersonAction => ({\n    type: ADD_PERSON\n});\n\n/*********************************************\n * ON UPDATE PERSON\n *********************************************/\n\nexport const ON_UPDATE_PERSON = 'ON_UPDATE_PERSON';\nexport type OnUpdatePersonAction = {\n    type: ON_UPDATE_PERSON,\n    person: Person\n}\nexport const onUpdatePersonAction =\n    (person: Person): OnUpdatePersonAction => ({\n        type: ON_UPDATE_PERSON, person\n    });\n\n/*********************************************\n * UPDATE PERSON\n *********************************************/\n\nexport const UPDATE_PERSON = 'UPDATE_PERSON';\nexport type UpdatePersonAction = {\n    type: UPDATE_PERSON,\n    person: Person\n}\nexport const updatePersonAction =\n    (person: Person): UpdatePersonAction => ({\n        type: UPDATE_PERSON, person\n    });\n\n\n/*********************************************\n * SET SYNC STATUS\n *********************************************/\n\nexport const SET_SYNC_STATUS = 'SET_SYNC_STATUS';\nexport type SetSyncStatusAction = {\n    type: SET_SYNC_STATUS,\n    isSyncing: boolean\n};\nexport const setSyncStatusAction = (isSyncing): SetSyncStatusAction => ({\n    type: SET_SYNC_STATUS,\n    isSyncing\n});","// @flow\nimport React from 'react';\nimport {connect} from \"react-redux\";\nimport {addPersonAction, onUpdatePersonAction, postPersonAction, removePersonAction,} from \"../+store/actions\";\nimport _ from \"lodash\";\n\nconst handleSubmit = (ev, addPerson, isLast) => {\n    ev.preventDefault();\n    if (isLast) {\n        addPerson();\n    }\n};\n\nconst Person = ({ person, updatePersonName, createOrUpdate, addPerson, isLast, removePerson }) => (\n    <div className=\"card person-card\">\n        <form className=\"card-content\" onSubmit={(ev) => handleSubmit(ev, addPerson, isLast)}>\n            <div className=\"field has-addons\">\n                <p className=\"control\">\n                    <span type=\"button\" style={{width: '2.7rem'}} className=\"button is-static\" tabIndex={-1}>\n                        { person.id }\n                    </span>\n                </p>\n                <p className=\"control is-expanded\">\n                    <input type=\"text\"\n                           className=\"input\"\n                           placeholder={'Name'}\n                           value={person.name}\n                           onChange={ (ev) => {updatePersonName(ev.target.value)} }\n                           autoFocus={true} />\n                </p>\n                <p className=\"control\">\n                    <button type=\"button\" onClick={ () => removePerson() } style={{width: '2.7rem'}} className=\"button is-danger\" tabIndex={-1}>\n                        <span className=\"icon\">\n                            &#10005;\n                        </span>\n                    </button>\n                </p>\n            </div>\n        </form>\n    </div>\n);\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    updatePersonName: (name) => dispatch(onUpdatePersonAction({ ...ownProps.person , name })),\n    createOrUpdate: (person) => dispatch(postPersonAction(person)),\n    addPerson: () => dispatch(addPersonAction()),\n    removePerson: () => dispatch(removePersonAction(ownProps.person))\n});\n\nconst mapStateToProps = (state, ownProps) => ({\n    isLast: (state.persons.length-1) === _.findIndex(state.persons, ({uid}) => ownProps.person.uid === uid)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Person);\n","// @flow\n\nimport React from 'react';\nimport Person from \"./Person\";\nimport {connect} from \"react-redux\";\nimport type {AppState} from \"../+store/model\";\n\nconst PersonList = ({ persons }) => (\n    <ul>\n        {persons.map( (p) =>\n            <li key={p.uid}><Person person={p}/></li>\n        )}\n    </ul>\n);\n\nconst mapStateToProps = (state: AppState) => ({\n    persons: state.persons\n});\n\nexport default connect(mapStateToProps)(PersonList);","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {addPersonAction, fetchPersonsAction} from \"../+store/actions\";\nimport type {AppState} from \"../+store/model\";\n\nconst ActionBar = ({ addPerson, fetch, isSyncing }) => (\n    <div className=\"field is-grouped\">\n        <p className=\"control is-expanded\">\n            <button className=\"button is-fullwidth is-outlined is-success\" onClick={() => addPerson()}>Add Person</button>\n        </p>\n        <p className=\"control is-expanded\" style={{width: '15%'}}>\n            <button className={`button is-fullwidth is-info is-outlined ${ isSyncing ? '' : '' } `}\n                    disabled={isSyncing}\n                    onClick={() => !isSyncing && fetch() }>\n                {isSyncing ? 'Syncing...' : 'Refresh' }\n            </button>\n        </p>\n    </div>\n);\n\nconst mapDispatchToProps = (dispatch) => ({\n    addPerson: () => dispatch(addPersonAction()),\n    fetch: () => dispatch(fetchPersonsAction())\n});\n\nconst mapStateToProps = (state: AppState) => ({\n    isSyncing: state.isSyncing\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionBar);","import React from 'react';\nimport './App.css';\nimport PersonList from \"./components/PersonList\";\nimport ActionBar from \"./components/ActionBar\";\n\n\nconst App = () => (\n    <React.Fragment>\n        <section className=\"hero is-primary is-bold\">\n            <div className=\"hero-body\">\n                <div className=\"container has-text-centered\">\n                    <h1 className=\"title\">\n                        Javascript​ ​UI​ ​↔​ ​Server​ ​syncing\n                    </h1>\n                    <h2 className=\"subtitle\">\n                        Jan Calanog\n                    </h2>\n                </div>\n            </div>\n        </section>\n          <div className=\"section\">\n            <div className=\"content\">\n                <p className=\"has-text-centered is-size-7\">\n                    Have a look at the console, there you can find mocked network request logs.\n                </p>\n            </div>\n            <div className=\"container\">\n              <div className=\"columns is-centered\">\n                <div className=\"column is-4\">\n                    <PersonList/>\n                    <ActionBar />\n                </div>\n              </div>\n            </div>\n          </div>\n    </React.Fragment>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// @flow\nimport {Action} from \"redux\";\nimport type {AppState} from \"./model\";\nimport {NOT_YET_PERSISTED} from \"./model\";\nimport type {\n    FetchPersonsSuccessAction,\n    PostPersonSuccessAction,\n    RemovePersonAction,\n    SetSyncStatusAction,\n    UpdatePersonAction\n} from \"./actions\";\nimport {\n    ADD_PERSON,\n    FETCH_PERSONS_SUCCESS,\n    POST_PERSON_SUCCESS,\n    REMOVE_PERSON,\n    SET_SYNC_STATUS,\n    UPDATE_PERSON\n} from \"./actions\";\nimport _ from \"lodash\";\n\nconst initialState: AppState = {\n    isSyncing: false,\n    persons: []\n};\n\nexport const reducer = (state: AppState = initialState, action: Action) => {\n\n    switch (action.type) {\n\n        case FETCH_PERSONS_SUCCESS: {\n            return {\n                ...state,\n                persons: (action: FetchPersonsSuccessAction).persons.map(p => ({ ...p, uid: _.uniqueId('person_')}))\n            };\n        }\n\n        case POST_PERSON_SUCCESS: {\n            const newPerson = (action: PostPersonSuccessAction).person;\n            return {\n                ...state,\n                persons: state.persons\n                    .map(oldPerson =>\n                        (newPerson.uid === oldPerson.uid)\n                            ? {...oldPerson, id: newPerson.id }\n                            : oldPerson\n                    )\n            }\n        }\n\n        case REMOVE_PERSON: {\n            const deletedPerson = (action: RemovePersonAction).person;\n            const uid = deletedPerson.uid;\n            return {\n                ...state,\n                persons: state.persons.filter(p => p.uid !== uid)\n            };\n        }\n\n        case ADD_PERSON: {\n            return {\n                ...state,\n                persons: [...state.persons, { id: NOT_YET_PERSISTED, name: '', uid: _.uniqueId('person_') }]\n            }\n        }\n\n        case UPDATE_PERSON: {\n            const updatePerson = (action: UpdatePersonAction).person;\n            return {\n                ...state,\n                persons: state.persons.map((person) => {\n                    return (updatePerson.uid === person.uid)\n                        ? { ...person, ...updatePerson }\n                        : person\n                })\n            }\n        }\n\n        case SET_SYNC_STATUS: {\n            return {\n                ...state,\n                isSyncing: (action: SetSyncStatusAction).isSyncing\n            }\n        }\n\n        default:\n            return state;\n    }\n};\n","// @flow\nimport {Action, Store} from \"redux\";\nimport {Subject} from \"rxjs\";\nimport {\n    DELETE_PERSON,\n    DELETE_PERSON_SUCCESS,\n    FETCH_PERSONS,\n    FETCH_PERSONS_SUCCESS,\n    PATCH_PERSON,\n    PATCH_PERSON_SUCCESS,\n    POST_PERSON,\n    POST_PERSON_SUCCESS,\n    setSyncStatusAction,\n} from \"../actions\";\nimport {debounceTime} from \"rxjs/operators\";\n\nconst syncStatusMiddleware = (store: Store) => {\n\n    const syncStatus = new Subject<boolean>();\n    syncStatus.asObservable().pipe(debounceTime(1000)).subscribe(isSyncing => {\n        store.dispatch(setSyncStatusAction(isSyncing));\n    });\n\n    return (next) => (action: Action) => {\n\n        switch (action.type) {\n\n            case FETCH_PERSONS:\n            case POST_PERSON:\n            case PATCH_PERSON:\n            case DELETE_PERSON:\n                store.dispatch(setSyncStatusAction(true));\n                syncStatus.next(true);\n                break;\n\n            case FETCH_PERSONS_SUCCESS:\n            case POST_PERSON_SUCCESS:\n            case PATCH_PERSON_SUCCESS:\n            case DELETE_PERSON_SUCCESS:\n                syncStatus.next(false);\n                break;\n\n            default:\n                break;\n        }\n        return next(action);\n    }\n};\n\nexport default syncStatusMiddleware;","// @flow\nimport {merge, Observable, Subject} from \"rxjs\";\nimport {Action} from \"redux\";\nimport type {Entity, UID} from \"../model\";\nimport {buffer, filter, map, take, tap, withLatestFrom} from \"rxjs/operators\";\nimport _ from \"lodash\";\n\n/**\n * Basically, this class creates an observable of type Observable<Action>\n * which can be subscribed. As long as this observable has not yet emitted\n * an action, follow-up actions can be pushed into the actionSubject.\n * However, only the last action that has been pushed is included in the\n * stream of the initial observable. The payload of the follow-up action\n * adopts the ID (or any given path) of the payload of the initial action\n * payload and is also emitted by the observable.\n */\nexport class ActionPostponeObject {\n\n    buffer$ = new Subject<any>();\n    actionSubject$ = new Subject<Action>();\n\n    constructor(\n        observable$: Observable<Action>,\n        mergeObjectPath: string = 'payload.id'\n    ) {\n        this.followUpObservable = this._initFollowUpObservable(mergeObjectPath);\n        this.initialObservable$ = this._initObservable(observable$, mergeObjectPath);\n    }\n\n    asObservable = (): Observable<Action> => {\n        return merge(\n            this.initialObservable$,\n            this.followUpObservable,\n        ).pipe(filter(action => !!action));\n    };\n\n    _initFollowUpObservable = (\n        mergeObjectPath: string\n    ): Observable<Action | false> => {\n        return this.actionSubject$.asObservable()\n            .pipe(\n                buffer(this.buffer$),\n                map(actions => _.last(actions)),\n                withLatestFrom(this.buffer$),\n                map(([action, mergeObject]) => {\n                    return (action)\n                        ? _.setWith(_.clone(action), mergeObjectPath, mergeObject)\n                        : false;\n                }),\n                take(1)\n            );\n    };\n\n    _initObservable = (\n        obs$: Observable<Action>,\n        mergeObjectPath: string\n    ): Observable<Action> => {\n        return obs$.pipe(\n            tap(action  => { this.buffer$.next(_.get(action, mergeObjectPath)); }),\n            take(1)\n        );\n    };\n\n    push = (action: Action) => {\n        this.actionSubject$.next(action);\n    };\n}\n\n/*\n * This class manages ActionPostponeObjects by storing them in a map.\n * Once the ActionPostponeObject is finished with its task, the entry\n * is deleted from the map again.\n * The UID is used to assign follow-up actions to a specific running action.\n */\nexport class ActionProcrastinator {\n\n    _uidMap: {[UID]: ActionPostponeObject} = {};\n\n    create = (\n        uid: UID,\n        obs$: Observable<Entity>,\n        mergeObjectPath: string = 'payload.id'\n    ): ActionPostponeObject => {\n        this._uidMap[uid] = new ActionPostponeObject(\n            obs$.pipe(tap(() => { this._remove(uid) })),\n            mergeObjectPath\n        );\n        return this.get(uid);\n    };\n\n    pushAction = (\n        uid: UID,\n        action: Action\n    ): void => {\n        if (this.hasUUID(uid)) {\n            this.get(uid).push(action);\n        } else {\n            throw Error(`Cannot find ActionPostponeObject with the UUID: ${uid}`);\n        }\n    };\n\n    hasUUID = (uid: UID): boolean => {\n        return uid in this._uidMap;\n    };\n\n    get = (uid: UID): ActionPostponeObject => {\n        return this._uidMap[uid];\n    };\n\n    _remove = (uid: UID): void => {\n        delete this._uidMap[uid];\n    };\n}\n\nexport default ActionProcrastinator;","// @flow\nimport {Action, Store} from \"redux\";\nimport type {\n    DeletePersonAction,\n    OnUpdatePersonAction,\n    PatchPersonAction,\n    PostPersonAction,\n    PostPersonSuccessAction,\n    RemovePersonAction,\n} from \"../actions\";\nimport {\n    ADD_PERSON,\n    DELETE_PERSON,\n    deletePersonAction,\n    deletePersonSuccessAction,\n    FETCH_PERSONS,\n    fetchPersonsSuccessAction,\n    ON_UPDATE_PERSON,\n    PATCH_PERSON,\n    patchPersonAction,\n    patchPersonSuccessAction,\n    POST_PERSON,\n    POST_PERSON_SUCCESS,\n    postPersonAction,\n    postPersonSuccessAction,\n    REMOVE_PERSON,\n    updatePersonAction,\n} from \"../actions\";\nimport PersonService from \"../../services/personService\";\nimport _ from \"lodash\";\nimport {map} from \"rxjs/operators\";\nimport ActionProcrastinator from \"../util/actionProcrastinator\";\n\nconst apiMiddleware = (personService: PersonService) => (store: Store) => {\n\n    const actionProcrastinator = new ActionProcrastinator();\n\n    return (next) => (action: Action) => {\n\n        const result = next(action);\n\n        switch (action.type) {\n\n            case ADD_PERSON: {\n                const person = _.last(store.getState().persons);\n                store.dispatch(postPersonAction(person));\n                break;\n            }\n\n            case POST_PERSON: {\n                const person = (action: PostPersonAction).person;\n                const actionPostpone$ = actionProcrastinator.create(\n                    person.uid,\n                    personService.post(person).pipe(map(p => postPersonSuccessAction({...p, uid: person.uid }))),\n                    'person.id'\n                ).asObservable();\n                actionPostpone$.subscribe(action => {\n                    store.dispatch(action);\n                });\n                break;\n            }\n\n            case POST_PERSON_SUCCESS: {\n                const person = (action: PostPersonSuccessAction).person;\n                store.dispatch(updatePersonAction({ uid: person.uid, id: person.id }));\n                break;\n            }\n\n            case PATCH_PERSON: {\n                const person = (action: PatchPersonAction).person;\n                if (person.id === -1) {\n                    actionProcrastinator.pushAction(person.uid, patchPersonAction(person));\n                } else {\n                    personService.patch(person).subscribe(p => {\n                        store.dispatch(patchPersonSuccessAction(p));\n                    });\n                }\n                break;\n            }\n\n            case REMOVE_PERSON: {\n                const person = (action: RemovePersonAction).person;\n                store.dispatch(deletePersonAction(person));\n                break;\n            }\n\n            case DELETE_PERSON: {\n                const person = (action: DeletePersonAction).person;\n                if (person.id === -1) {\n                    actionProcrastinator.pushAction(person.uid, deletePersonAction(person));\n                } else {\n                    personService.delete(person).subscribe(p => {\n                        store.dispatch(deletePersonSuccessAction(p));\n                    });\n                }\n                break;\n            }\n\n            case ON_UPDATE_PERSON: {\n                const person = (action: OnUpdatePersonAction).person;\n                store.dispatch(updatePersonAction(person));\n                store.dispatch(patchPersonAction(person));\n                break;\n            }\n\n            case FETCH_PERSONS: {\n                personService.fetchAll().subscribe(persons => {\n                    store.dispatch(fetchPersonsSuccessAction(persons))\n                });\n                break;\n            }\n\n            default:\n                break;\n        }\n        return result;\n    };\n};\n\nexport default apiMiddleware;","// @flow\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport {reducer} from \"./+store/reducer\";\nimport syncStatusMiddleware from \"./+store/middlewares/syncStatusMiddleware\";\nimport apiMiddleware from \"./+store/middlewares/apiMiddleware\";\nimport MockHttpApi from \"./services/mockHttpApi\";\nimport PersonService from \"./services/personService\";\n\nconst http = new MockHttpApi();\nconst personService = new PersonService(http);\n\nconst store = createStore(reducer, applyMiddleware(apiMiddleware(personService), syncStatusMiddleware));\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// @flow\nimport type {Person} from \"../+store/model\";\nimport MockHttpApi from \"./mockHttpApi\";\nimport {Observable} from \"rxjs\";\n\nexport default class PersonService {\n\n    constructor(http: MockHttpApi) {\n        this.http = http;\n    }\n\n    fetchAll = (): Observable<Person[]> => {\n        return this.http.get('/api/persons');\n    };\n\n    post = (person: Person): Observable<Person> => {\n        return this.http.post('/api/persons', person);\n    };\n\n    patch = (person: Person): Observable<Person> => {\n        return this.http.patch('/api/persons', person);\n    };\n\n    delete = (person: Person): Observable<Person> => {\n      return this.http.delete('/api/persons', person);\n    };\n}","// @flow\nimport {Observable, of, throwError} from \"rxjs\";\nimport {delay, take} from \"rxjs/operators\";\nimport type {Person} from \"../+store/model\";\nimport _ from 'lodash';\n\nexport default class MockHttpApi {\n    currentId = 0;\n    persons: Person[] = [];\n\n    get = (url: string): Observable<Person[]> => {\n        const persons = this.persons.map(p => _.omit(p, 'uid'));\n        console.info(\n            '%c[GET]\\t',\n            'color:green;',\n            'request:', {},\n            'response:',\n            persons\n        );\n        return of(persons).pipe(take(1), delay(500))\n    };\n\n    delete = (url: string, person: Person): Observable<Person> => {\n\n        if (person.id === -1) {\n            return throwError('ID cannot be -1');\n        }\n\n        this.persons = this.persons.filter(p => p.id !== person.id);\n        console.info(\n            '%c[DELETE]\\t',\n            'color:green;',\n            'request:',\n            _.omit(person, ['uid']),\n            'response:',\n            _.omit(person, ['uid'])\n        );\n        return of(person).pipe(delay(1000));\n    };\n\n    post = (url: string, person: Person): Observable<Person>  => {\n        return Observable.create((observer) => {\n            setTimeout(() => {\n                const id = this.currentId++;\n                const personWithNewId = { ...person, id };\n                this.persons = [...this.persons, personWithNewId];\n                console.info(\n                    '%c[POST]\\t',\n                    'color:green;',\n                    'request:',\n                    _.omit(person, ['uid']),\n                    'response:',\n                    _.omit(personWithNewId, ['uid'])\n                );\n                observer.next(_.omit(personWithNewId, ['uid']));\n                observer.complete();\n            }, 2000)\n        });\n    };\n\n    patch = (url: string, updatePerson: Person): Observable<Person> => {\n        return Observable.create(observer => {\n            if (updatePerson.id === -1) {\n                console.error(\n                    '%c[PATCH]\\t',\n                    'color:red;',\n                    'request:',\n                    updatePerson,\n                    'response:',\n                    { status: 400, msg: 'BAD REQUEST' }\n                );\n                observer.error(\"ID cannot be -1\");\n            }\n            setTimeout(() => {\n                this.persons = this.persons\n                    .map(oldPerson =>\n                        (oldPerson.id === updatePerson.id)\n                            ?  { ...oldPerson, ...updatePerson }\n                            : oldPerson\n                    );\n\n                console.info(\n                    '%c[PATCH]\\t',\n                    'color:green;',\n                    'request:',\n                    _.omit(updatePerson, ['uid']),\n                    'response:',\n                    _.omit(updatePerson, ['uid'])\n                );\n                observer.next(_.omit(updatePerson, ['uid']));\n                observer.complete();\n            }, 1000);\n        });\n    };\n}","// @flow\n\nexport type UID = number;\n\nexport type Entity = { id: number, uid: UID };\nexport type Person = { name: string } & Entity;\n\nexport type AppState = {\n    isSyncing: boolean,\n    persons: Person[]\n};\n\nexport const NOT_YET_PERSISTED = -1;"],"sourceRoot":""}